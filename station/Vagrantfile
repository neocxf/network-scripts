VAGRANTFILE_API_VERSION = 2
# Require 'yaml' module
require 'yaml'

if Gem.win_platform?
  # Install vagrant-disksize to allow resizing the vagrant box disk.
  unless Vagrant.has_plugin?("vagrant-disksize")
      raise  Vagrant::Errors::VagrantError.new, "vagrant-disksize plugin is missing. Please install it using 'vagrant plugin install vagrant-disksize' and rerun 'vagrant up'"
  end
  unless Vagrant.has_plugin?("vagrant-guest_ansible")
      raise  Vagrant::Errors::VagrantError.new, "vagrant-guest_ansible plugin is missing. Please install it using 'vagrant plugin install vagrant-guest_ansible' and rerun 'vagrant up'"
  end
  unless Vagrant.has_plugin?("vagrant-winnfsd")
      raise  Vagrant::Errors::VagrantError.new, "vagrant-winnfsd plugin is missing. Please install it using 'vagrant plugin install vagrant-winnfsd' and rerun 'vagrant up'"
  end
end

# Read YAML file with VM details (box, CPU, RAM, IP addresses)
# Edit machines.yml to change VM configuration details
machines = YAML.load_file(File.join(File.dirname(__FILE__), 'machines.yml'))
# Create and configure the VMs
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Always use Vagrant's default insecure key
  config.ssh.insert_key = true
  config.disksize.size = '100GB'

  provisioner = Vagrant::Util::Platform.windows? ? :guest_ansible : :ansible

  # Iterate through entries in YAML file to create VMs
  machines.each do |machine|

    # Configure the VMs per details in machines.yml
    config.vm.define machine['name'] do |srv|

      # if Vagrant.has_plugin?("vagrant-vbguest")
      #   config.vbguest.auto_update = false
      # end

      # Don't check for box updates
      srv.vm.box_check_update = false

      # Specify the hostname of the VM
      srv.vm.hostname = machine['name']

      # Specify the Vagrant box to use (must use VMware box)
      srv.vm.box = machine['vmw_box']

      # Configure default synced folder (disable by default)
      if machine['sync_disabled'] != nil
        srv.vm.synced_folder '.', '/vagrant', disabled: machine['sync_disabled']
      else
        srv.vm.synced_folder '.', '/vagrant', disabled: true
      end #if machine['sync_disabled']

      # Assign additional private network
      if machine['ip_addr'] != nil
        srv.vm.network 'private_network', ip: machine['ip_addr']
      end
      if machine['pub_ip_addr'] != nil
        srv.vm.network 'public_network', ip: machine['pub_ip_addr']
      end

      # Configure CPU & RAM per settings in machines.yml (Virtualbox)
      srv.vm.provider 'virtualbox' do |vb|
        vb.customize ['modifyvm', :id, '--nested-hw-virt', 'on']
        # Enable promiscuous mode
        vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
        vb.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]

        # Disable usb2.0
        vb.customize ["modifyvm", :id, "--usb", "on"]
        vb.customize ["modifyvm", :id, "--usbehci", "off"]
        vb.memory = machine['ram']
        vb.cpus = machine['vcpu']
        vb.gui = true
        vb.check_guest_additions =  false

      end # srv.vm.provider 'Virtualbox'

      $init_script = <<'__EOF__'
sed -i -e 's/http:\/\/[^\/]*/http:\/\/mirrors.ustc.edu.cn/g' /etc/apt/sources.list
sudo apt-get update
sudo apt-get install -y vim net-tools openvswitch-switch virtualbox curl python3-pip dos2unix ansible
# pip install paramiko pyyaml jinja2 markupsafe ansible -i https://mirrors.aliyun.com/pypi/simple/
ansible-galaxy install -r /vagrant/role.yml
__EOF__

      srv.vm.provision "shell", inline: $init_script

      # Provision the VM with Ansible if enabled in machines.yml
      if machine['provision'] != nil
        srv.vm.provision provisioner do |ansible|
          ansible.playbook = machine['provision']
        end # srv.vm.provision
      end # if machine['provision']
    end # config.vm.define
  end # machines.each
end # Vagrant.configure
